from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import asyncio
from get_stock_sql import fetch_all_stock_data, fetch_single_stock_data

# T·∫°o m·ªôt thread pool ƒë·ªÉ ch·∫°y c√°c h√†m ƒë·ªìng b·ªô trong m√¥i tr∆∞·ªùng b·∫•t ƒë·ªìng b·ªô
executor = ThreadPoolExecutor(max_workers=5)

# H√†m hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh
async def display_help(update: Update) -> None:
    help_text = (
        "üí° *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:*\n"
        "- /hello: Ch√†o h·ªèi bot\n"
        "- /getstock <M√£ ch·ª©ng kho√°n>: Xem th√¥ng tin v·ªÅ m√£ ch·ª©ng kho√°n c·ª• th·ªÉ (V√≠ d·ª•: `/getstock ACB`)\n"
        "- /getallstocks: L·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n hi·ªán t·∫°i\n"
        "- /help: Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh\n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

# H√†m ch√†o h·ªèi
async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"Hello {update.effective_user.first_name}!")
    await display_help(update)    

# H√†m l·∫•y th√¥ng tin ch·ª©ng kho√°n c·ª• th·ªÉ
async def get_stock(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        stock_code = context.args[0].strip().upper()
        await update.message.reply_text("ƒêang l·∫•y d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
        try:
            loop = asyncio.get_event_loop()
            stock_data = await loop.run_in_executor(executor, fetch_single_stock_data, stock_code)

            # Ki·ªÉm tra xem stock_data c√≥ ph·∫£i l√† None kh√¥ng
            if stock_data is None:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n.")
                return

            # Ki·ªÉm tra xem stock_data c√≥ ph·∫£i l√† m·ªôt t·ª´ ƒëi·ªÉn kh√¥ng
            if isinstance(stock_data, dict):
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                message = (
                    f"*K·∫øt qu·∫£ ƒë∆∞·ª£c l·∫•y l√∫c:* `{current_time}`\n"
                    f"```\n"
                    f"| M√£ ch·ª©ng kho√°n | Gi√° tr·∫ßn  | Gi√° s√†n  | Gi√° TC   | Tong Kl giao d·ªãch |\n"
                    f"|----------------|-----------|----------|----------|-------------------|\n"
                    f"| {stock_data['stock_code']:<14} | {stock_data['ceiling_price']:<9} | {stock_data['floor_price']:<8} | {stock_data['tc_price']:<8} | {stock_data['total_traded_qty']:<12} |\n"
                    f"```"
                )
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n.")
        except Exception as e:
            await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    else:
        await update.message.reply_text(
            "Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n sau l·ªánh /getstock. V√≠ d·ª•: /getstock ACB"
        )
    await display_help(update)

# H√†m l·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n
async def get_all_stocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("ƒêang l·∫•y d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
    try:
        loop = asyncio.get_event_loop()
        stock_data = await loop.run_in_executor(executor, fetch_all_stock_data)
        if stock_data:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            header = (
                f"*K·∫øt qu·∫£ ƒë∆∞·ª£c l·∫•y l√∫c:* `{current_time}`\n"
                f"```\n"
                f"| M√£ ch·ª©ng kho√°n | Gi√° tr·∫ßn  | Gi√° s√†n  | Gi√° TC   | Tong Kl giao d·ªãch |\n"
                f"|----------------|-----------|----------|----------|-------------------|\n"
            )
            rows = ""
            for item in stock_data:
                rows += (
                    f"| {item['stock_code']:<14} | {item['ceiling_price']:<9} | {item['floor_price']:<8} | {item['tc_price']:<8} | {item['total_traded_qty']:<12} |\n"
                )
            footer = "```"
            message = header + rows + footer
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n.")
    except Exception as e:
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    await display_help(update)

# L·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await display_help(update)    

# Kh·ªüi t·∫°o bot
app = ApplicationBuilder().token('7928962019:AAFT_w5aEzE-M875p1zPkJTSn7r1a7tLRNY').build()

# Th√™m c√°c l·ªánh
app.add_handler(CommandHandler("hello", hello))
app.add_handler(CommandHandler("getstock", get_stock))
app.add_handler(CommandHandler("getallstocks", get_all_stocks))
app.add_handler(CommandHandler("help", help_command))

# Ch·∫°y bot
app.run_polling()
