from telegram import Update, BotCommand
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import asyncio
from get_stock_sql import fetch_all_stock_data, fetch_single_stock_data, single_stock_data, all_stock_data
import logging  # Th√™m import logging
from sql.database import connect_database
import logging 
from user_events import log_user_event
import mysql.connector


#! C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


#! T·∫°o m·ªôt thread pool ƒë·ªÉ ch·∫°y c√°c h√†m ƒë·ªìng b·ªô trong m√¥i tr∆∞·ªùng b·∫•t ƒë·ªìng b·ªô
executor = ThreadPoolExecutor(max_workers=5)


#! H√†m hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh
async def display_help(update: Update) -> None:
    help_text = (
        "üí° *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:*\n"
        "- /hello: Ch√†o h·ªèi bot\n"
        "- /getstock <M√£ ch·ª©ng kho√°n>: Xem th√¥ng tin v·ªÅ m√£ ch·ª©ng kho√°n c·ª• th·ªÉ (V√≠ d·ª•: `/getstock ACB`)\n"
        "- /getallstocks: L·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n hi·ªán t·∫°i\n"
        "- /theodoi3p: Theo d√µi gi√° 1 c·ªßa m√£ ch·ª©ng kho√°n trong 3 ph√∫t (V√≠ d·ª•: `/theodoi3p ACB`)\n"
        "- /theodoiall <S·ªë ph√∫t>: Theo d√µi gi√° 1 c·ªßa t·∫•t c·∫£ m√£ ch·ª©ng kho√°n trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªâ ƒë·ªãnh, n·∫øu tƒÉng 1% th√¨ s·∫Ω th√¥ng ba√≥ (V√≠ d·ª•: `/theodoiall 5`)\n"
        "- /batdauchoidoi <M√£ ch·ª©ng kho√°n> <ƒêi·ªÅu ki·ªán> <Gi√°>: Theo d√µi gi√° 1 c·ªßa m√£ ch·ª©ng kho√°n v√† th√¥ng b√°o khi ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c th·ªèa m√£n (V√≠ d·ª•: `/batdauchoidoi ACB > 25.00`)\n"
        "- /dungchodoi: D·ª´ng theo d√µi ƒëi·ªÅu ki·ªán ƒë√£ ƒë·∫∑t cho m√£ ch·ª©ng kho√°n (V√≠ d·ª•: `/dungchodoi`)\n"
        "- /xemlog: Xem nh·∫≠t k√Ω s·ª± ki·ªán c·ªßa b·∫°n (ho·∫∑c t·∫•t c·∫£ n·∫øu b·∫°n l√† admin)\n"
        "- /help: Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh n√†y\n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

#! H√†m thi·∫øt l·∫≠p c√°c l·ªánh cho bot
async def set_bot_commands(application):
    commands = [
        BotCommand("hello", "Ch√†o h·ªèi bot"),
        BotCommand("auto", "B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu"),
        BotCommand("stop", "D·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu"),
        BotCommand("getstock", "L·∫•y th√¥ng tin m√£ ch·ª©ng kho√°n"),
        BotCommand("getallstocks", "L·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n"),
        BotCommand("theodoi3p", "Theo d√µi m√£ ck trong 3p (V√≠ d·ª•: `/theodoi3p ACB`)"),
        BotCommand("help", "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot"),
    ]
    await application.bot.set_my_commands(commands)

#! H√†m ch√†o h·ªèi
# Example command handler with logging
async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "hello"
    details = "User greeted the bot"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    await update.message.reply_text(f"Hello {update.effective_user.first_name}!") 


#! L·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await display_help(update)    


# ƒê·∫∑t ID c·ªßa admin
ADMIN_ID = 6133213893  # Thay th·∫ø b·∫±ng ID c·ªßa b·∫°n

#! H√†m t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu m·ªói 1 ph√∫t
async def auto_fetch_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "auto"
    details = "Started auto-fetching data"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    job = context.job_queue.run_repeating(fetch_data_job, interval=60, first=0, chat_id=update.message.chat_id)
    context.chat_data["auto_fetch_job"] = job
    await update.message.reply_text("ƒê√£ b·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu.")
    await display_help(update)

async def fetch_data_job(context: ContextTypes.DEFAULT_TYPE):
    await asyncio.get_event_loop().run_in_executor(executor, fetch_all_stock_data)
    logging.info("ƒê√£ t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n.")

#! H√†m d·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông
async def stop_auto_fetch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "stop"
    details = "Stopped auto-fetching data"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    job = context.chat_data.get("auto_fetch_job")
    if job:
        job.schedule_removal()
        del context.chat_data["auto_fetch_job"]
        await update.message.reply_text("ƒê√£ d·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông.")
    else:
        await update.message.reply_text("Kh√¥ng c√≥ ch·∫ø ƒë·ªô t·ª± ƒë·ªông n√†o ƒëang ch·∫°y.")
    await display_help(update)

#! H√†m l·∫•y th√¥ng tin ch·ª©ng kho√°n c·ª• th·ªÉ
async def get_stock(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "getstock"
    details = f"Requested stock info for {context.args[0]}" if context.args else "No stock code provided"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    if context.args:
        stock_code = context.args[0].strip().upper()
        await update.message.reply_text("üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
        try:
            loop = asyncio.get_event_loop()
            stock_data_list = await loop.run_in_executor(executor, single_stock_data, stock_code)

            if stock_data_list and len(stock_data_list) > 0:
                stock_data = stock_data_list[0]
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                message = (
                    f"*K·∫øt qu·∫£ ƒë∆∞·ª£c l·∫•y l√∫c:* `{current_time}`\n"
                    f"```\n"
                    f"| M√£ ch·ª©ng kho√°n | Gi√° tr·∫ßn  | Gi√° s√†n  | Gi√° TC   | Gi√° B√°n 1   |\n"
                    f"|----------------|-----------|----------|----------|----------|\n"
                    f"| {stock_data['stock_code']:<14} | {stock_data['ceiling_price']:<9} | {stock_data['floor_price']:<8} | {stock_data['tc_price']:<8} | {stock_data['best1offer_price']:<8} |\n"
                    f"```"
                )
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n.")
        except Exception as e:
            logging.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
            await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n sau l·ªánh /getstock. V√≠ d·ª•: /getstock ACB")
    await display_help(update)

#! H√†m l·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n
async def get_all_stocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "getallstocks"
    details = "Requested all stock info"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    await update.message.reply_text("ƒêang l·∫•y d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
    try:
        loop = asyncio.get_event_loop()
        stock_data = await loop.run_in_executor(executor, all_stock_data)
        if stock_data:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            header = (
                f"*K·∫øt qu·∫£ ƒë∆∞·ª£c l·∫•y l√∫c:* `{current_time}`\n"
                f"```\n"
                f"| M√£ ch·ª©ng kho√°n | Gi√° tr·∫ßn  | Gi√° s√†n  | Gi√° TC   | Gi√° B√°n 1   |\n"
                f"|----------------|-----------|----------|----------|----------|\n"
            )
            rows = ""
            for item in stock_data:
                rows += (
                    f"| {item['stock_code']:<14} | {item['ceiling_price']:<9} | {item['floor_price']:<8} | {item['tc_price']:<8} | {item['best1offer_price']:<8} |\n"
                )
            footer = "```"
            message = header + rows + footer
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n.")
    except Exception as e:
        logging.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    await display_help(update)

#! H√†m theo d√µi gi√° tr·ªã bestOffer1
async def track_stock_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "theodoi3p"
    details = f"Tracking stock price for {context.args[0]}" if context.args else "No stock code provided"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    if context.args:
        stock_code = context.args[0].strip().upper()
        await update.message.reply_text(f"üîÑ ƒêang theo d√µi gi√° cho m√£ ch·ª©ng kho√°n: {stock_code}...")

        # L·∫•y gi√° ban ƒë·∫ßu t·ª´ c∆° s·ªü d·ªØ li·ªáu
        initial_data = await asyncio.get_event_loop().run_in_executor(executor, single_stock_data, stock_code)
        
        if not initial_data or len(initial_data) == 0:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n.")
            return
        
        # Truy c·∫≠p ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong danh s√°ch
        initial_price = float(initial_data[0]['best1offer_price'])
        await asyncio.sleep(180)  # Ch·ªù 3 ph√∫t

        # L·∫•y gi√° sau 3 ph√∫t
        updated_data = await asyncio.get_event_loop().run_in_executor(executor, single_stock_data, stock_code)
        
        if not updated_data or len(updated_data) == 0:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n.")
            return
        
        # Truy c·∫≠p ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong danh s√°ch
        updated_price = float(updated_data[0]['best1offer_price'])

        # So s√°nh gi√° v√† th√¥ng b√°o
        if updated_price > initial_price:
            await update.message.reply_text(f"{stock_code} tƒÉng t·ª´ {initial_price} l√™n {updated_price} ‚Üí {stock_code} ƒë√°ng ƒë·∫ßu t∆∞.")
        else:
            await update.message.reply_text(f"{stock_code} kh√¥ng ƒë√°ng ƒë·∫ßu t∆∞.")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n sau l·ªánh /theodoi3p. V√≠ d·ª•: /theodoi3p ACB")

#! H√†m theo d√µi gi√° cho t·∫•t c·∫£ m√£ ch·ª©ng kho√°n
async def track_all_stocks_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "theodoiall"
    details = f"Tracking all stocks for {context.args[0]} minutes" if context.args else "No duration provided"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    if context.args:
        try:
            duration_minutes = int(context.args[0])
            await update.message.reply_text(f"üîÑ ƒêang theo d√µi gi√° cho t·∫•t c·∫£ m√£ ch·ª©ng kho√°n trong {duration_minutes} ph√∫t...")
            
            # L·∫•y t·∫•t c·∫£ m√£ ch·ª©ng kho√°n
            all_stocks_data = await asyncio.get_event_loop().run_in_executor(executor, all_stock_data)
            initial_prices = {item['stock_code']: float(item['best1offer_price']) for item in all_stocks_data}
            await asyncio.sleep(duration_minutes * 60)  # Ch·ªù trong th·ªùi gian ƒë√£ nh·∫≠p

            # L·∫•y gi√° sau th·ªùi gian theo d√µi
            updated_stocks_data = await asyncio.get_event_loop().run_in_executor(executor, all_stock_data)
            updated_prices = {item['stock_code']: float(item['best1offer_price']) for item in updated_stocks_data}

            # So s√°nh gi√° v√† th√¥ng b√°o
            increased_stocks = []
            max_increase = 0
            best_stock = None

            for stock_code, initial_price in initial_prices.items():
                updated_price = updated_prices.get(stock_code)
                if updated_price:
                    increase_percentage = ((updated_price - initial_price) / initial_price) * 100
                    if increase_percentage >= 1:  # N·∫øu tƒÉng t·ª´ 1%
                        increased_stocks.append((stock_code, initial_price, updated_price, increase_percentage))
                        if increase_percentage > max_increase:
                            max_increase = increase_percentage
                            best_stock = (stock_code, initial_price, updated_price)

            # G·ª≠i th√¥ng b√°o
            if increased_stocks:
                for stock in increased_stocks:
                    await update.message.reply_text(f"{stock[0]} tƒÉng t·ª´ {stock[1]} l√™n {stock[2]} ({stock[3]:.2f}%)")
                if best_stock:
                    await update.message.reply_text(f"{best_stock[0]} l√† m√£ ch·ª©ng kho√°n ƒë√°ng ƒë·∫ßu t∆∞ nh·∫•t, tƒÉng t·ª´ {best_stock[1]} l√™n {best_stock[2]} ({max_increase:.2f}%)")
            else:
                await update.message.reply_text("Kh√¥ng c√≥ m√£ ch·ª©ng kho√°n n√†o tƒÉng t·ª´ 1% tr·ªü l√™n.")
        except ValueError:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ph√∫t h·ª£p l·ªá.")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ph√∫t theo d√µi sau l·ªánh /theodoiall. V√≠ d·ª•: /theodoiall 5")

#! H√†m b·∫Øt ƒë·∫ßu ch·ªù ƒë·ª£i ƒëi·ªÅu ki·ªán
async def start_waiting_for_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "batdauchoidoi"
    details = f"Started waiting for condition on {context.args[0]}" if context.args else "No stock code provided"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    if context.args and len(context.args) == 3:
        stock_code = context.args[0].strip().upper()
        comparison_operator = context.args[1].strip()  # ">" ho·∫∑c "<"
        target_price = float(context.args[2])

        await update.message.reply_text(f"üîÑ ƒêang theo d√µi gi√° cho m√£ ch·ª©ng kho√°n: {stock_code}...")

        # L∆∞u job v√†o context ƒë·ªÉ c√≥ th·ªÉ h·ªßy sau n√†y
        job = context.job_queue.run_repeating(check_stock_price, interval=10, first=0, context=(update.message.chat_id, stock_code, comparison_operator, target_price))
        context.chat_data["waiting_job"] = job
        await update.message.reply_text("ƒê√£ b·∫Øt ƒë·∫ßu theo d√µi ƒëi·ªÅu ki·ªán.")

    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n, ƒëi·ªÅu ki·ªán so s√°nh v√† gi√°. V√≠ d·ª•: /batdauchoidoi ACB > 25.00")

#! H√†m ki·ªÉm tra gi√° ch·ª©ng kho√°n
async def check_stock_price(context: ContextTypes.DEFAULT_TYPE):
    chat_id, stock_code, comparison_operator, target_price = context.job.context

    # L·∫•y gi√° hi·ªán t·∫°i t·ª´ c∆° s·ªü d·ªØ li·ªáu
    stock_data = await asyncio.get_event_loop().run_in_executor(executor, single_stock_data, stock_code)

    if not stock_data or len(stock_data) == 0:
        await context.bot.send_message(chat_id, f"Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n {stock_code}.")
        return

    current_price = float(stock_data[0]['best1offer_price'])

    # So s√°nh gi√°
    if comparison_operator == ">":
        if current_price > target_price:
            await context.bot.send_message(chat_id, f"{stock_code} hi·ªán t·∫°i c√≥ gi√° {current_price}, l·ªõn h∆°n {target_price}.")
            context.job.schedule_removal()  # H·ªßy job
    elif comparison_operator == "<":
        if current_price < target_price:
            await context.bot.send_message(chat_id, f"{stock_code} hi·ªán t·∫°i c√≥ gi√° {current_price}, nh·ªè h∆°n {target_price}.")
            context.job.schedule_removal()  # H·ªßy job

#! H√†m d·ª´ng theo d√µi ƒëi·ªÅu ki·ªán
async def stop_waiting_for_condition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "dungchodoi"
    details = "Stopped waiting for condition"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    job = context.chat_data.get("waiting_job")
    if job:
        job.schedule_removal()
        del context.chat_data["waiting_job"]
        await update.message.reply_text("ƒê√£ d·ª´ng theo d√µi ƒëi·ªÅu ki·ªán.")
    else:
        await update.message.reply_text("Kh√¥ng c√≥ l·ªánh n√†o ƒëang ch·∫°y.")

#! H√†m xem log ng∆∞·ªùi d√πng
async def view_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    command = "xemlog"
    details = "Viewed logs"
    chat_id = update.effective_chat.id

    # Log the user event
    log_user_event(user_id, username, command, details, chat_id)

    connection = connect_database()
    if connection is None:
        await update.message.reply_text("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.")
        return

    try:
        cursor = connection.cursor(dictionary=True)
        if user_id == ADMIN_ID:
            query = "SELECT * FROM user_events ORDER BY timestamp DESC LIMIT 10"
            cursor.execute(query)
        else:
            query = "SELECT * FROM user_events WHERE user_id = %s ORDER BY timestamp DESC LIMIT 10"
            cursor.execute(query, (user_id,))

        logs = cursor.fetchall()
        if logs:
            message = "*Nh·∫≠t k√Ω s·ª± ki·ªán g·∫ßn ƒë√¢y:*\n"
            for log in logs:
                message += (
                    f"- User: {log['username']}\n"
                    f"  Command: {log['command']}\n"
                    f"  Details: {log['details']}\n"
                    f"  Time: {log['timestamp']}\n"
                    f"  Chat ID: {log['chat_id']}\n"
                    "\n"
                )
            # Log the message to check its content
            logging.info(f"Sending message: {message}")
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("Kh√¥ng c√≥ nh·∫≠t k√Ω n√†o ƒë·ªÉ hi·ªÉn th·ªã.")
    except mysql.connector.Error as err:
        logging.error(f"ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n nh·∫≠t k√Ω: {err}")
        await update.message.reply_text("ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n nh·∫≠t k√Ω.")
    finally:
        cursor.close()
        connection.close()

#! Kh·ªüi t·∫°o bot
app = ApplicationBuilder().token('7928962019:AAFT_w5aEzE-M875p1zPkJTSn7r1a7tLRNY').build()

#! Th√™m c√°c l·ªánh
app.add_handler(CommandHandler("hello", hello))
app.add_handler(CommandHandler("getstock", get_stock))
app.add_handler(CommandHandler("getallstocks", get_all_stocks))
app.add_handler(CommandHandler("auto", auto_fetch_data))
app.add_handler(CommandHandler("stop", stop_auto_fetch))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("theodoi3p", track_stock_price))
app.add_handler(CommandHandler("theodoiall", track_all_stocks_price))
app.add_handler(CommandHandler("batdauchoidoi", start_waiting_for_condition))
app.add_handler(CommandHandler("dungchodoi", stop_waiting_for_condition))
app.add_handler(CommandHandler("xemlog", view_logs))

#! Ch·∫°y bot
app.run_polling()