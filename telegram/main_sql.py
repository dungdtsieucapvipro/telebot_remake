from telegram import Update, BotCommand
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import asyncio
from get_stock_sql import fetch_all_stock_data, fetch_single_stock_data, single_stock_data, all_stock_data
import logging  # Th√™m import logging
from sql.database import connect_database


#! C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


#! T·∫°o m·ªôt thread pool ƒë·ªÉ ch·∫°y c√°c h√†m ƒë·ªìng b·ªô trong m√¥i tr∆∞·ªùng b·∫•t ƒë·ªìng b·ªô
executor = ThreadPoolExecutor(max_workers=5)


#! H√†m hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh
async def display_help(update: Update) -> None:
    help_text = (
        "üí° *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:*\n"
        "- /hello: Ch√†o h·ªèi bot\n"
        "- /auto: B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu\n"
        "- /stop: D·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu\n"
        "- /getstock <M√£ ch·ª©ng kho√°n>: Xem th√¥ng tin v·ªÅ m√£ ch·ª©ng kho√°n c·ª• th·ªÉ (V√≠ d·ª•: `/getstock ACB`)\n"
        "- /getallstocks: L·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n hi·ªán t·∫°i\n"
        "- /help: Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh\n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

#! H√†m thi·∫øt l·∫≠p c√°c l·ªánh cho bot
async def set_bot_commands(application):
    commands = [
        BotCommand("hello", "Ch√†o h·ªèi bot"),
        BotCommand("auto", "B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu"),
        BotCommand("stop", "D·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu"),
        BotCommand("getstock", "L·∫•y th√¥ng tin m√£ ch·ª©ng kho√°n"),
        BotCommand("getallstocks", "L·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n"),
        BotCommand("help", "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot"),
    ]
    await application.bot.set_my_commands(commands)

#! H√†m ch√†o h·ªèi
async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"Hello {update.effective_user.first_name}!")
    await display_help(update)  


#! L·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await display_help(update)    


#! H√†m t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu m·ªói 1 ph√∫t
async def auto_fetch_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    job = context.job_queue.run_repeating(fetch_data_job, interval=60, first=0, chat_id=update.message.chat_id)
    context.chat_data["auto_fetch_job"] = job
    await update.message.reply_text("ƒê√£ b·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu.")
    await display_help(update)
async def fetch_data_job(context: ContextTypes.DEFAULT_TYPE):
    await asyncio.get_event_loop().run_in_executor(executor, fetch_all_stock_data)
    logging.info("ƒê√£ t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n.")

#! H√†m d·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông
async def stop_auto_fetch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    job = context.chat_data.get("auto_fetch_job")
    if job:
        job.schedule_removal()
        del context.chat_data["auto_fetch_job"]
        await update.message.reply_text("ƒê√£ d·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông.")
    else:
        await update.message.reply_text("Kh√¥ng c√≥ ch·∫ø ƒë·ªô t·ª± ƒë·ªông n√†o ƒëang ch·∫°y.")
    await display_help(update)
#! H√†m l·∫•y th√¥ng tin ch·ª©ng kho√°n c·ª• th·ªÉ
async def get_stock(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        stock_code = context.args[0].strip().upper()
        await update.message.reply_text("üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
        try:
            loop = asyncio.get_event_loop()
            stock_data_list = await loop.run_in_executor(executor, single_stock_data, stock_code)

            if stock_data_list and len(stock_data_list) > 0:
                stock_data = stock_data_list[0]
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                message = (
                    f"*K·∫øt qu·∫£ ƒë∆∞·ª£c l·∫•y l√∫c:* `{current_time}`\n"
                    f"```\n"
                    f"| M√£ ch·ª©ng kho√°n | Gi√° tr·∫ßn  | Gi√° s√†n  | Gi√° TC   |\n"
                    f"|----------------|-----------|----------|----------|\n"
                    f"| {stock_data['stock_code']:<14} | {stock_data['ceiling_price']:<9} | {stock_data['floor_price']:<8} | {stock_data['tc_price']:<8} |\n"
                    f"```"
                )
                await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n.")
        except Exception as e:
            logging.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
            await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n sau l·ªánh /getstock. V√≠ d·ª•: /getstock ACB")
    await display_help(update)

#! H√†m l·∫•y t·∫•t c·∫£ th√¥ng tin ch·ª©ng kho√°n
async def get_all_stocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("ƒêang l·∫•y d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
    try:
        loop = asyncio.get_event_loop()
        stock_data = await loop.run_in_executor(executor, all_stock_data)
        if stock_data:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            header = (
                f"*K·∫øt qu·∫£ ƒë∆∞·ª£c l·∫•y l√∫c:* `{current_time}`\n"
                f"```\n"
                f"| M√£ ch·ª©ng kho√°n | Gi√° tr·∫ßn  | Gi√° s√†n  | Gi√° TC   |\n"
                f"|----------------|-----------|----------|----------|\n"
            )
            rows = ""
            for item in stock_data:
                rows += (
                    f"| {item['stock_code']:<14} | {item['ceiling_price']:<9} | {item['floor_price']:<8} | {item['tc_price']:<8} |\n"
                )
            footer = "```"
            message = header + rows + footer
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n.")
    except Exception as e:
        logging.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    await display_help(update)
#! Kh·ªüi t·∫°o bot
app = ApplicationBuilder().token('7928962019:AAFT_w5aEzE-M875p1zPkJTSn7r1a7tLRNY').build()

#! Th√™m c√°c l·ªánh
app.add_handler(CommandHandler("hello", hello))
app.add_handler(CommandHandler("getstock", get_stock))
app.add_handler(CommandHandler("getallstocks", get_all_stocks))
app.add_handler(CommandHandler("auto", auto_fetch_data))
app.add_handler(CommandHandler("stop", stop_auto_fetch))
app.add_handler(CommandHandler("help", help_command))

#! Ch·∫°y bot
app.run_polling()
